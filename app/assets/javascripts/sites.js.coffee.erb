# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http:#coffeescript.org/


##################################################################################################################################
#
# This is the main javascript class for all site related stuff.
# The upload works this way: 
# <ul> 
#   <li> First images need to be selected via upload button</li>
#   <li> ...or, drag and drop</li>
#   <li> Images which really will be uploaded need to be selected first with the mouse</li>
#   <li> Click the upload button</li>
#   <li> After images have been successfully uploaded, a thumbnail is automatically generated</li>
#   <li> As this is all CLIENT SIDE, this implies:
#     <ul>
#       <li> The client sends the image to AWS S3 </li>
#       <li> If this went OK, a handle is returned. The client <strong> saves the image on the server</strong></li>
#       <li> The server returns an id for the new image to the client; the client generates a thumbnail and 
#            <strong>saves this thumbnail on AWS S3</strong></li>
#       <li> If this all went ok, the client associates the new thumbnail with the id of the image on the server</li>
#       <li> If that went ok, the process is finished</li>
#     </ul>
# </ul>
#
##################################################################################################################################

  
$(document).ready ->

  #determine browser
  ua = navigator.userAgent.toLowerCase()
  isAndroid = ua.indexOf("android") > -1
  webkitVer = parseInt((/WebKit\/([0-9]+)/.exec(navigator.appVersion) or 0)[1], 10) or undefined
  isNativeAndroid = webkitVer <= 534 && navigator.vendor.indexOf('Google') == 0
  
  #android specific
  if isAndroid || isNativeAndroid
    $('.voting_disabled').addClass('voting_disabled_android')

  #disable voting
  $('.voting_disabled .col-xs-3').mouseover ->
    $(this).attr('title','You have already voted for this image')

  $('.voting_disabled').click (e) ->
    e.preventDefault()
    return false
  
  #ajax calls will always send the CSRF token
  $.ajaxSetup headers:
    "X-CSRF-Token": $("meta[name=\"csrf-token\"]").attr("content")

  #some variables
  $uploadList = $('#upload-candidates-container')
  $url = $("#s3-data").data("url")
  upload_btn = $('#upload_selected')
  #this is the actual container of all files to be uploaded
  file_list = [] # actually uploading
  queue = [] # waiting in line to start upload
  simultaneous_upload = 10 # max # to upload at the same time

  $('.select-all').click ->
    for img in $('.thumbnail')
      if !$(img).hasClass 'selected_img'
        $(img).trigger('click')
    $('.file-count').html(file_list.length)

  $('.select-none').click ->
    for img in $('.thumbnail')
      if $(img).hasClass 'selected_img'
        $(img).trigger('click')
    $('.file-count').html(file_list.length)
	

#####################
# keypress handling for hotkeys
#####################

  # bind key events for image traversing (j,k) and classification (1,2,3)
  # 1 = image good
  # 2 = image not ok
  # 3 = image bad
  $('body').keydown( (evt) ->
    selected = false
    $('#select_first').hide()
    if $('.selected_img').length
      #make sure an image gets selected first prior to navigate
      selected = $('.selected_img').first()
    #navigate right
    if evt.key =='k'
      if selected
        index = $('#links .thumbnail').index(selected)
        selected.removeClass('selected_img')
        if index is $('#links .thumbnail').length - 1
          $('#links .thumbnail').first().addClass('selected_img')
        else
          next = $('#links .thumbnail').eq(index + 1)
          next.addClass('selected_img')
      else
        $('#links .thumbnail').first().addClass('selected_img')
    #navigate left 
    else if evt.key == 'j'
      if selected
        index = $('#links .thumbnail').index(selected)
        selected.removeClass('selected_img')
        if index is 0
          $('#links .thumbnail').last().addClass('selected_img')
        else
          prev = $('#links .thumbnail').eq(index - 1)
          prev.addClass('selected_img')
      else
        $('#links .thumbnail').last().addClass('selected_img')
    #set good 
    else if evt.key == '1'
      if selected
        image_id = selected.find('img').attr('alt')
        btn = selected.parent().find('.btn-success').first()
        set_quality(btn, image_id, 'set_good')
      else
        $('#select_first').show()
    #set not ok 
    else if evt.key == '2'
      if selected
        image_id = selected.find('img').attr('alt')
        btn = selected.parent().find('.btn-warning').first()
        set_quality(btn, image_id, 'set_nok')
      else
        $('#select_first').show()
    #set bad 
    else if evt.key == '3'
      if selected
        image_id = selected.find('img').attr('alt')
        btn = selected.parent().find('.btn-danger').first()
        set_quality(btn, image_id, 'set_bad')
      else
        $('#select_first').show()
    
    return
  )
  # upload link triggers file upload dialog attached to the rest of the uploading code
  $('#href-upload').click () ->
    $('#fileinput').trigger('click')

  $('#upload-area').bind('dragover', (e) ->
    e.preventDefault()
    $('#upload-area').addClass('hover')
  )
	
  $('#upload-area').bind('dragleave', (e) ->
    $('#upload-area').removeClass('hover')
  )

  $('#upload-area').bind('drop', (e) ->
    $('#upload-area').removeClass('hover')
  )

  # trigger file upload browser on Browse click
  $('#browse').click () ->
    $('#fileupload').click()
  
  #function to calculate the file size in human readable format
  formatFileSize = (bytes) ->
    return ""  if typeof bytes isnt "number"
    return (bytes / 1000000000).toFixed(2) + " GB"  if bytes >= 1000000000
    return (bytes / 1000000).toFixed(2) + " MB"  if bytes >= 1000000
    (bytes / 1000).toFixed(2) + " KB"

  #file upload widget, jquery-fileupload
  if $("#fileupload")
    $("#fileupload").fileupload({
      xhrFields: {withCredentials: true},
      url: $url,
      type: 'POST',
      autoUpload: false,
      acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
      limitConcurrentUploads: 10,
      maxFileSize: 9000000,
      dataType: 'xml',
      formData: $("#s3-data").data("fields"),
      paramName: 'file',
      dropZone: $('#upload-area'),
      #on adding a new file via drag and drop or file upload widget
      add: (e, data) ->
        for file in data.files
          #for each selected image, first show a loading gif
          tmp_tpl = $('<div class="col-xs-3 col-sm-3 col-md-3"><div class="thumbnail"><div class="loading"><i class="fa fa-spinner fa-spin"></i></div><div class="caption"></div></div>')
          $uploadList.append(tmp_tpl)
          #read the file
          reader = new FileReader()
          #when finished
          reader.onloadend = ->
            original = reader.result
            img = new Image()
            img.src = original
            img.onload = () ->
              #read EXIF GPS info
              EXIF.getData this, ->
                lat = EXIF.getTag(this, "GPSLatitude")
                lng = EXIF.getTag(this, "GPSLongitude")
                if (lat is `undefined`) or (lng is `undefined`)
                  return
                #Convert coordinates to WGS84 decimal
                latRef = EXIF.getTag(this, "GPSLatitudeRef")
                lngRef = EXIF.getTag(this, "GPSLongitudeRef")
                lat = (lat[0] + lat[1]/60 + lat[2]/3600)
                lng = (lng[0] + lng[1]/60 + lng[2]/3600)

                if latRef != "N"
                  lat = lat * -1
                if lngRef == "W"
                  lng = lng * -1

                file.lat = lat
                file.lng = lng
                return
              #file has been loaded, remove loading gif
              tmp_tpl.remove()
              #create a canvas as thumbnail holder
              canvas = document.createElement("canvas")
              ratio = img.width / img.height
              canvas.width = 500
              canvas.height = 500 / ratio
              canvas.className = "canvas-thumbnail"
              
	      # here, we should introduce queuing so we don't 
	      # hit the client with a bazillion canvas resize 
	      # actions at once
              canvas.getContext("2d").drawImage img, 0, 0, canvas.width, canvas.height
              #this is the template for the image in the upload view
              tpl = $('<div class="col-xs-6 col-sm-3 col-md-3 working"><div class="thumbnail"><div class="caption"></div><div class="progress" style="display:none;"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"><span class="sr-only">45% Complete</span></div></div><div class="status"><a class="abort-upload" style="display:none;"><i class="fa fa-remove"></i> cancel</i></a></div></div></div>')
	      # add image source
              tpl.find(".thumbnail").append(canvas)
              file.thumbnail = canvas
              
              # add click handler to thumbnails so they can be selected
              tpl.find('.thumbnail').click ->
                $('.file-count').html(file_list.length+1)
                if $(this).hasClass 'selected_img'
                  $(this).removeClass 'selected_img'
                  idx = file_list.indexOf(file)
                  if idx > -1
                    file_list.splice(idx, 1)
                  $("#upload-msg").append('<p class="status-info">Image ' + file.name + " removed from upload queue</p>")
                else
                  $(this).addClass 'selected_img'
                  queue.push(file)
                  if queue.length > simultaneous_upload
                    file_list.push(file)
                  $("#upload-msg").append('<p class="status-info">Image ' + file.name + " added to upload queue</p>")
                
                if file_list.length > 0
                  upload_btn.prop('disabled', false)
                  $('#cancel_files').prop('disabled', false)
                  
                return
              # Append the file name and file size
              tpl.find(".caption").text(file.name).append "<i><br/>" + formatFileSize(file.size) + "</i>"
              # Add the HTML to the UL element
              data.context = tpl.appendTo($uploadList)
              # Listen for clicks on the cancel icon
              tpl.find(".abort-upload").click ->
                if $(this).hasClass("working")
                  jqXHR.abort()
                  $("#upload-msg").append('<p class="status-warning">Upload of ' + file.name + ' aborted by user!</p>')
                  tpl.fadeOut ->
                    tpl.remove()

          reader.readAsDataURL file
          jqXHR = null
          
          # Click "Start Upload"
          $('#upload_selected').on('click', () ->
            if (file_list.indexOf(file) > -1)
              data.context.find('#cancel_files').prop('disabled', true)
              data.context.find('.selected_img .abort-upload').show()
              data.context.find('.progress').show()
              # Finally upload
              jqXHR = data.submit()
          )

          # Cancel the upload
          $('#cancel_upload').on('click', () ->
            if jqXHR
              jqXHR.abort()
              $("#upload-msg").append('<p class="status-error">Upload aborted by user!</p>')
          )
              
          # Clear all files
          $('#clear_files').on('click', () ->
            $uploadList.children().each( (i, elem) ->
              $(this).remove()
            )
            if $(".progress-bar").text().indexOf("Failed!")
              $(".progress-bar").text("")
            
            file_list.length = 0
          )

      # Progress update callback for each file
      progress: (e, data) ->
       if data.context
          # Calculate the completion percentage of the upload
          progress = parseInt(data.loaded / data.total * 100, 10)
          #$('#upload-status').text(progress)
          # Update the hidden input field and trigger a change
          data.context.find("input").val(progress).change()
          data.context.find(".progress-bar").css('width', progress + '%')
          data.context.find(".progress-bar").attr('aria-valuenow', progress)
          data.context.find(".progress-bar").text(progress + '%')
          # The Upload finished, display "Generating thumbnail" 
          if progress is 100
            data.context.find('.thumbnail').css('opacity',0.4)
            data.context.find(".progress").hide()
            #data.context.find('thumbnail').remove()
            data.context.removeClass "working"
            #data.context.append($('<div class="generating_thumbnail></div>').html('Generating thumbnail...'))
            p = $('<p></p>')
            p.html('<i class="fa fa-spinner fa-spin"></i> Generating thumbnail...')
            data.context.find('.thumbnail .status').prepend(p)

      # Progress update callback for overall process
      progressall: (e, data) ->
        $(".progress-area").show()
        progress = parseInt(data.loaded / data.total * 100, 10)
        $(".progress-area .progress-bar").css('width', progress + '%')
        $(".progress-area .progress-bar").attr('aria-valuenow', progress)
        $(".progress-area .progress-bar").text(progress + '%')

      #Callback for a single file when finished
      done: (e, data) ->
        upload_btn.prop('disabled', true)

        for file in data.files
          # If the file is a thumbnail, the whole process succeeded; remove the image from the list
          if file.isThumbnail
            key  = $(data.jqXHR.responseXML).find("Key").text()
            csrf = $("meta[name=\"csrf-token\"]").attr("content")
            put_data =
              thumbnail: $('#s3-data').data('url') + key
            # Associate the thumbnail with the image! 
            $.ajax({
              url: "/images/" + file.image_id + '/set_thumbnail',
              type: 'PUT',
              dataType: "json",
              data: put_data,
              beforeSend: (request) ->
                  request.setRequestHeader "X-CSRF-Token",csrf
                  return
            }).done( (response) ->
                # All went fine
                $("#upload-msg").append('<p class="status-info">Thumbnail successfully associated to image ' + file.original + "</p>")
                $("#image_" + file.image_id).fadeOut(500, "swing", ->
                   $(this).parent().remove()
                )
              ).fail( (response) ->
                # Something went wrong
                $("#upload-msg").append('<p class="status-error">Thumbnail failed to be associated to image ' + file.original + "</p>")
              )
          # The uploaded file was the original image, now generate a thumbnail
          else
            $("#upload-msg").append('<p class="status-info">Image ' + file.name + " successfully uploaded</p>")

            #extract key and generate URL from response
            site = $('#site_id').val()
            key  = $(data.jqXHR.responseXML).find("Key").text()
            post_data =
              site_id: site
              url: $('#s3-data').data('url') + key
              lat: file.lat
              lng: file.lng

            # Save image on server first
            $.ajax({
              url: "/sites/" + site + "/images",
              type: 'POST',
              dataType: "json",
              data: post_data
            }).done( (response) ->
              # Image successfully saved on server, start thumbnail generation, using BLOB
              data.context.find('.thumbnail').attr('id',"image_" + response.id)
              file.thumbnail.toBlob( (blob) ->
                blob.isThumbnail = true
                last = file.name.lastIndexOf('.')
                ext  = file.name.substr(last)
                blob.name = file.name.substr(0, last) + '_thumb' + ext
                blob.image_id = response.id
                blob.original = file.name
                flist = []
                flist.push(blob)
                #Start uploading the thumbnail to AWS S3
                $("#fileupload").fileupload("send", {files: flist})
              )
              $("#upload-msg").append('<p class="status-success">Image ' + file.name + " successfully saved to site</p>")
              return
            ).fail( (xhr, textStatus, errorThrown) ->
              $("#upload-msg").append('<p class="status-error"><i>Image ' + file.name + " failed to upload! " + xhr.responseText + "</i></p>")
              return
            )

      start: (e) ->
        $(".progress-section").addClass('in')

      # Upload failed callback
      fail: (e, data) ->
        if (data.errorThrown == "abort")
          $("#upload-msg").append('<p class="status-warning">Complete upload aborted by user.</p>')
          $(".progress-bar").css("background", "#F0AD4E")
        else
          $("#upload-msg").append('<p class="status-info">Image ' + file.name + " successfully uploaded</p>")

          #extract key and generate URL from response
          site = $('#site_id').val()
          key  = $(data.jqXHR.responseXML).find("Key").text()
          post_data =
            site_id: site
            url: $('#s3-data').data('url') + key

          # post for thumbnail images, generated in canvas
          $.ajax({
            url: "/sites/" + site + "/images",
            type: 'POST',
            dataType: "json",
            data: post_data
          }).done( (response) ->
            file.thumbnail.toBlob( (blob) ->
              blob.isThumbnail = true
              last = file.name.lastIndexOf('.')
              ext  = file.name.substr(last)
              blob.name = file.name.substr(0, last) + '_thumb' + ext
              blob.image_id = response.id
              blob.original = file.name
              flist = []
              flist.push(blob)
              $("#fileupload").fileupload("send", {files: flist})
            )
            $("#upload-msg").append('<p class="status-success">Image ' + file.name + " successfully saved to site</p>")
            return
          ).fail( (xhr, textStatus, errorThrown) ->
            $("#upload-msg").append('<p class="status-error"><i>Image ' + file.name + " failed to upload! " + xhr.responseText + "</i></p>")
            return
          )

        data.context.find('.candidate-buttons').remove()
        data.context.find('.thumbnail').fadeOut(2000, "swing") ->
           $(this).remove()
          #create hidden field
          #var input = $("<input />", { type:'hidden', name: fileInput.attr('name'), value: url })

    start: (e) ->
      $(".progress-section").addClass('in')

    fail: (e, data) ->
      if (data.errorThrown == "abort")
        $("#upload-msg").append('<p class="status-warning">Complete upload aborted by user.</p>')
        $(".progress-bar").css("background", "#F0AD4E")
      else
        $('#failure').show()
        $(".progress-bar").css("background", "red")
        $(".progress-bar").text("Failed!")
    })

  $(document).on "drop dragover", (e) ->
      e.preventDefault()

#####################
# image voting
#####################
 
  # Click handlers when selecting image quality
  $('.image_controls .btn-success').click () ->
    btn       = $(this)
    id        = $(this).attr('id')
    #index 9 is after id 'btn_good_'
    image_id  = id.substr(9)
    set_quality(btn, image_id, 'set_good')
  
  $('.image_controls .btn-primary').click () ->
    btn       = $(this)
    id        = $(this).attr('id')
    #index 8 is after id 'btn_nok_'
    image_id  = id.substr(8)
    set_quality(btn, image_id, 'set_nok')
  
  $('.image_controls .btn-danger').click () ->
    btn       = $(this)
    id        = $(this).attr('id')
    #index 8 is after id 'btn_bad_'
    image_id  = id.substr(8)
    set_quality(btn, image_id, 'set_bad')
  
  # Actually save the new quality to the server 
  set_quality = (btn, image_id, action) ->
    $.ajax "/images/" + image_id + "/" + action,
      type: "GET"
      dataType: 'json'
      success: (image) ->
        if $('#blueimp-gallery').hasClass('auto-advance')
          # auto-advance to next image
          $('#blueimp-gallery').data('gallery').next()
          return

        quality = image.quality
        quality_class = 'assigned_quality'
        # Different classes for the image set list or the detailed image dialog view
        if btn.hasClass 'detail_control'
          quality_class = 'assigned_quality_single'
        
        btn_group = btn.parent().parent()
        btn_group.find('.btn').each( (i, elem) ->
          if $(this).attr('id').indexOf(quality) > -1
            $(this).addClass(quality_class)
          else
            $(this).removeClass(quality_class)
        )
        # Disable voting immediately after voting
        btn_group.addClass("voting_disabled")
        # Android specific
        if isAndroid || isNativeAndroid
          btn_group.addClass("voting_disabled_android")
        # Add a hint for the user
        btn_group.mouseover ->
          $(this).attr('title','You have already voted for this image')
        btn_group.find('.btn').each( (i,elem) ->
          $(this).addClass('btn_disabled')
        )

      error: (jqXHR, textStatus, errorThrown) ->
        console.log textStatus
        console.log errorThrown

  current_img = 0
	
#####################
# fullscreen mode
#####################
  $('#test_button').click () ->
    $('#links .thumbnail').first().click()
  
	# Click handlers for setting the image quality in the detailed dialog view
  $('#blueimp-gallery .detail_image_controls .btn-success').click () ->
    set_quality $(this), current_img, 'set_good'

  $('#blueimp-gallery .detail_image_controls .btn-warning').click () ->
    set_quality $(this), current_img, 'set_nok'

  $('#blueimp-gallery .detail_image_controls .btn-danger').click () ->
    set_quality $(this), current_img, 'set_bad'

  # The image gallery widget
  $('#blueimp-gallery')
    .on('open', (event) ->
        #Gallery open event handler
    )
    .on('opened', (event) ->
        # Gallery opened event handler
    )
    .on('slide', (event, index, slide) ->
        current_img = $('.site_details input[type=hidden]').eq(index).val()
        $.get '/images/' + current_img, ((response) ->
          if response.voting_disabled == true
            if isAndroid || isNativeAndroid
              $('#blueimp-gallery .detail_image_controls .btn-group-justified').addClass('voting_disabled_android')
            $('#blueimp-gallery .detail_image_controls .btn-group-justified').addClass('voting_disabled')
            $('#blueimp-gallery .detail_image_controls .btn').each( (i, elem) ->
              $(this).addClass('btn_disabled')
            )
          else
            $('#blueimp-gallery .detail_image_controls .btn-group-justified').removeClass('voting_disabled_android')
            $('#blueimp-gallery .detail_image_controls .btn-group-justified').removeClass('voting_disabled')
            $('#blueimp-gallery .detail_image_controls .btn').each( (i, elem) ->
              $(this).removeClass('btn_disabled')
            )
          $('#blueimp-gallery .detail_image_controls .btn').each( (i, elem) ->
            if $(this).hasClass('assigned_quality_single')
              $(this).removeClass('assigned_quality_single')
          )
          img = response.image
          if img.quality == 'good'
            $('#blueimp-gallery .detail_image_controls .btn-success').addClass('assigned_quality_single')
          else if img.quality == 'nok'
            $('#blueimp-gallery .detail_image_controls .btn-warning').addClass('assigned_quality_single')
          else if img.quality == 'bad'
            $('#blueimp-gallery .detail_image_controls .btn-danger').addClass('assigned_quality_single')
        ), "json"
        # Gallery slide event handler
    )
    .on('slideend', (event, index, slide) ->
        # Gallery slideend event handler
        if $('#blueimp-gallery .detail_image_controls .btn-group-justified').hasClass('voting_disabled')
          location.href='/surveys'
    )
    .on('slidecomplete', (event, index, slide) ->
        # Gallery slidecomplete event handler
    )
    .on('close', (event) ->
        # Gallery close event handler
        location.href='/surveys'
    )
    .on('closed', (event) ->
        # Gallery closed event handler
        location.href='/surveys'
    )